// Copyright 2018 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypeObjectHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "TypeObject.h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _$ctx.headerGuardName$_TYPE_OBJECT_H_
#define _$ctx.headerGuardName$_TYPE_OBJECT_H_

$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$

#include <fastrtps/types/TypeObject.h>
#include <map>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined($ctx.filename;format="toUpper"$_SOURCE)
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllexport )
#else
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllimport )
#endif // $ctx.filename;format="toUpper"$_SOURCE
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif // _WIN32

using namespace eprosima::fastrtps::types;

class $ctx.filename$TypeFactory
{
public:
    $ctx.filename$TypeFactory();
    ~$ctx.filename$TypeFactory();

    eProsima_user_DllExport TypeIdentifier* getBasicIdentifier(std::string &basic_type_name);

    eProsima_user_DllExport TypeIdentifier* getStringIdentifier(uint32_t bound, bool wide = false);

    eProsima_user_DllExport TypeIdentifier* getSequenceIdentifier(TypeIdentifier *type, uint32_t bound);

    eProsima_user_DllExport TypeIdentifier* getArrayIdentifier(TypeIdentifier *type, std::vector<uint32_t> &bound);

    /** Dimensions must be separated by a single space */
    eProsima_user_DllExport TypeIdentifier* getArrayIdentifier(TypeIdentifier *type, std::string &bound);

    eProsima_user_DllExport TypeIdentifier* getMapIdentifier(TypeIdentifier *keyType,
        TypeIdentifier *valueType, uint32_t bound);

    $definitions; separator="\n"$

private:
    std::map<std::string, TypeIdentifier*> m_Identifiers;
    std::map<std::string, TypeObject*> m_Objects;
};

#endif // _$ctx.headerGuardName$_TYPE_OBJECT_H_
>>

typedef_decl(ctx, parent, typedefs) ::= <<
eProsima_user_DllExport TypeIdentifier* get$typedefs.name$Identifier();
eProsima_user_DllExport TypeObject* get$typedefs.name$Object();

>>

enum_type(ctx, parent, enum) ::= <<
eProsima_user_DllExport TypeIdentifier* get$enum.name$Identifier();
eProsima_user_DllExport TypeObject* get$enum.name$Object();

>>

struct_type(ctx, parent, struct, extensions) ::= <<
eProsima_user_DllExport TypeIdentifier* get$struct.name$Identifier();
eProsima_user_DllExport TypeObject* get$struct.name$Object();

>>

union_type(ctx, parent, union, extensions) ::= <<
eProsima_user_DllExport TypeIdentifier* get$union.name$Identifier();
eProsima_user_DllExport TypeObject* get$union.name$Object();

>>
/***** Utils *****/