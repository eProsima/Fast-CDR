// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".cpp"], description=["This source file contains the definition of the described types in the IDL file."])$

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "$ctx.filename$.h"
$if(ctx.generateTypeObject)$
#include "$ctx.filename$TypeObject.h"
$endif$

$if(ctx.cdr)$
#include <fastcdr/Cdr.h>

$endif$

$if(ctx.fastcdr)$
#include <fastcdr/FastCdr.h>

$endif$

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<
$if(ctx.printexception)$
$exception.scopedname$::$exception.name$() : UserException()
{
    $exception.members : { member |$member_default_init(member=member)$}; separator="\n"$
}

$exception.scopedname$::$exception.name$(const $exception.name$ &x) : UserException(x)
{
    $exception.members : { member |m_$member.name$ = x.m_$member.name$;}; separator="\n"$
}

$exception.scopedname$::$exception.name$($exception.name$&& x) : UserException(std::move(x))
{
    $exception.members : { member |$member_move(member=member)$}; separator="\n"$
}

$exception.scopedname$& $exception.scopedname$::operator=(const $exception.name$ &x)
{
	UserException::operator=(x);
	$exception.members : { member |m_$member.name$ = x.m_$member.name$;}; separator="\n"$
	return *this;
}

$exception.scopedname$& $exception.scopedname$::operator=($exception.name$&& x)
{
	UserException::operator=(std::move(x));
	$exception.members : { member |$member_move(member=member)$}; separator="\n"$
	return *this;
}

$exception.scopedname$::~$exception.name$() throw()
{
    $exception.members : { member |$varDel(variable=member)$}; separator="\n"$
}

void $exception.scopedname$::raise() const
{
	throw *this;
}

$if(ctx.anyCdr)$
size_t $exception.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $exception.members : { member |$max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_alignment")$}; separator="\n"$

    return current_alignment - initial_alignment;
}

size_t $exception.scopedname$::getCdrSerializedSize(const $exception.scopedname$& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    $exception.members : { member |$serialized_size(ctx=ctx, object=member, data="data", var="current_alignment")$}; separator="\n"$

    return current_alignment - initial_alignment;
}

$endif$

$if(ctx.cdr)$
void $exception.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $exception.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $exception.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $exception.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$

$if(ctx.fastcdr)$
void $exception.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    $exception.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $exception.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    $exception.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$

$endif$
>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<
$if(const.parent)$
$if(const.parent.isInterface)$
$if(const.typeCode.isType_5)$
const $const.typeCode.cppTypename$ $const.parent.scopedname$::$const.name$ = $const.value$;
$elseif(const.typeCode.isType_6)$
const $const.typeCode.cppTypename$ $const.parent.scopedname$::$const.name$ = $const.value$;
$endif$
$endif$
$endif$
$endif$
>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<
$struct.scopedname$::$struct.name$()
{
    $struct.members:{ member |$member_default_init(member=member)$}; separator="\n"$

    $if(ctx.generateTypeObject)$
    // Just to register all known types
    register$ctx.filename$Types();
    $endif$
}

$struct.scopedname$::~$struct.name$()
{
}

$struct.scopedname$::$struct.name$(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$
}

$struct.scopedname$::$struct.name$($struct.name$ &&x)
{
    $struct.members:{$member_move(it)$}; separator="\n"$
}

$struct.scopedname$& $struct.scopedname$::operator=(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$

    return *this;
}

$struct.scopedname$& $struct.scopedname$::operator=($struct.name$ &&x)
{
    $struct.members:{$member_move(it)$}; separator="\n"$

    return *this;
}

$if(ctx.anyCdr)$
size_t $struct.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $struct.members : { member |$max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_alignment")$}; separator="\n"$

    return current_alignment - initial_alignment;
}

size_t $struct.scopedname$::getCdrSerializedSize(const $struct.scopedname$& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    $struct.members : { member |$serialized_size(ctx=ctx, object=member, data="data", var="current_alignment")$}; separator="\n"$

    return current_alignment - initial_alignment;
}

$endif$

$if(ctx.cdr)$
void $struct.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $struct.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$

$if(ctx.fastcdr)$
void $struct.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $struct.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$

$extensions : {$it$}; separator="\n"$
>>

bitset_type(ctx, parent, bitset) ::= <<
$bitset.scopedname$::$bitset.name$()
{
    $if(ctx.generateTypeObject)$
    // Just to register all known types
    register$ctx.filename$Types();
    $endif$
}

$bitset.scopedname$::~$bitset.name$()
{
}

$bitset.scopedname$::$bitset.name$(const $bitset.name$ &x)
{
    m_bitset = x.m_bitset;
}

$bitset.scopedname$::$bitset.name$($bitset.name$ &&x)
{
    m_bitset = x.m_bitset;
}

$bitset.scopedname$& $bitset.scopedname$::operator=(const $bitset.name$ &x)
{
    m_bitset = x.m_bitset;

    return *this;
}

$bitset.scopedname$& $bitset.scopedname$::operator=($bitset.name$ &&x)
{
    m_bitset = x.m_bitset;

    return *this;
}

$if(ctx.anyCdr)$
size_t $bitset.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    initial_alignment += sizeof(m_bitset);

    return current_alignment - initial_alignment;
}

size_t $bitset.scopedname$::getCdrSerializedSize(const $bitset.scopedname$&, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    initial_alignment += sizeof(m_bitset);

    return current_alignment - initial_alignment;
}

$endif$

$if(ctx.cdr)$
void $bitset.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << static_cast<uint64_t>(m_bitset.to_ullong());
}

void $bitset.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    uint64_t temp = 0;
    dcdr \>> temp;
    m_bitset = temp;
}

$endif$

$if(ctx.fastcdr)$
void $bitset.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << static_cast<uint64_t>(m_bitset.to_ullong());
}

void $bitset.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    uint64_t temp = 0;
    dcdr \>> temp;
    m_bitset = temp;
}

$endif$


$bitset.bitfields:{$public_bitfield_definition(it)$}; separator="\n"$

>>

public_bitfield_definition(member) ::= <<
void $bitset.scopedname$::$member.name$($member.typecode.cppTypename$ _$member.name$)
{
    int base = $member.basePosition$;
$if(member.typecode.typecode.isType_7)$
    m_bitset.set(base, _$member.name$);
$else$
    int size = $member.typecode.bitSize$;
    for (int i = base + size - 1; i >= base; --i)
    {
        m_bitset.set(i, _$member.name$ | 0x01);
        _$member.name$ = _$member.name$ \>> 1;
    }
$endif$

}

$member.typecode.cppTypename$ $bitset.scopedname$::$member.name$() const
{
    int base = $member.basePosition$;
$if(member.typecode.typecode.isType_7)$
    return m_bitset.test(base);
$else$
    int size = $member.typecode.bitSize$;
    std::bitset<$member.typecode.bitSize$> aux;
    for (int i = size - 1; i >= 0; --i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<$member.typecode.cppTypename$>(aux.to_ullong());
$endif$

}

>>

union_type(ctx, parent, union) ::= <<
$union.scopedname$::$union.name$()
{
    $if(union.defaultvalue)$
    m__d = $union.defaultvalue$;
    $else$
    m__d = $first(first(union.members).labels)$;
    $endif$
    $union.members:{ member |$member_default_init(member=member)$}; separator="\n"$
}

$union.scopedname$::~$union.name$()
{
}

$union.scopedname$::$union.name$(const $union.name$ &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
        $unionmemberdefault_copy(union.defaultMember)$
    }
}

$union.scopedname$::$union.name$($union.name$ &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
        $unionmemberdefault_move(union.defaultMember)$
    }
}

$union.scopedname$& $union.scopedname$::operator=(const $union.name$ &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
        $unionmemberdefault_copy(union.defaultMember)$
    }

    return *this;
}

$union.scopedname$& $union.scopedname$::operator=($union.name$ &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
        $unionmemberdefault_move(union.defaultMember)$
    }

    return *this;
}

void $union.scopedname$::_d($union.discriminator.cppTypename$ __d)
{
    bool b = false;

    switch(m__d)
    {
        $union.members:{$unionmember_discriminator_case(member=it, totallabels=union.totallabels)$}; separator="\n"$
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

$union.discriminator.cppTypename$ $union.scopedname$::_d() const
{
    return m__d;
}

$union.discriminator.cppTypename$& $union.scopedname$::_d()
{
    return m__d;
}

$union.members:{$public_unionmember_declaration(class=union.scopedname, member=it, defaultvalue=union.defaultvalue, totallabels=union.totallabels)$}; separator="\n"$

$if(ctx.anyCdr)$
size_t $union.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    $max_serialized_size(ctx=ctx, typecode=union.discriminator, var="current_alignment")$

    $union.members : { member |
    reset_alignment = current_alignment;

    $max_serialized_size(ctx=ctx, typecode=member.typecode, var="reset_alignment")$

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t $union.scopedname$::getCdrSerializedSize(const $union.scopedname$& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    $serialized_size_type(ctx=ctx, typecode=union.discriminator, var="current_alignment")$

    switch(data.m__d)
    {
        $union.members:{ member |$unionmember_case_selection_sesize(ctx=ctx, member=member, data="data", var="current_alignment")$}; separator="\n"$
        $unionmemberdefault_case_selection_sesize(ctx=ctx, member=union.defaultMember, data="data", var="current_alignment")$
    }

    return current_alignment - initial_alignment;
}

$endif$

$if(ctx.cdr)$
void $union.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << $serializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_se(ctx=ctx, member=member)$}; separator="\n"$
        $unionmemberdefault_case_selection_se(ctx=ctx, member=union.defaultMember)$
    }
}

void $union.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $deserializePossibleEnum(typecode=union.discriminator, name="m__d")$

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_de(ctx=ctx, member=member)$}; separator="\n"$
        $unionmemberdefault_case_selection_de(ctx=ctx, member=union.defaultMember)$
    }
}

$endif$

$if(ctx.fastcdr)$
void $union.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << $serializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_se(ctx=ctx, member=member)$}; separator="\n"$
        $unionmemberdefault_case_selection_se(ctx=ctx, member=union.defaultMember)$
    }
}

void $union.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    $deserializePossibleEnum(typecode=union.discriminator, name="m__d")$

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_de(ctx=ctx, member=member)$}; separator="\n"$
        $unionmemberdefault_case_selection_de(ctx=ctx, member=union.defaultMember)$
    }
}

$endif$

>>

enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_unionmember_declaration(class, member, totallabels, defaultvalue) ::= <<
$if(member.typecode.primitive)$
void $class$::$member.name$($member.typecode.cppTypename$ _$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member=member, defaultvalue=defaultvalue)$
}

$member.typecode.cppTypename$ $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$

    return m_$member.name$;
}

$member.typecode.cppTypename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$

    return m_$member.name$;
}
$else$
void $class$::$member.name$(const $member.typecode.cppTypename$ &_$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member=member, defaultvalue=defaultvalue)$
}

void $class$::$member.name$($member.typecode.cppTypename$ &&_$member.name$)
{
    m_$member.name$ = std::move(_$member.name$);
    $unionmember_set_discriminator(member=member, defaultvalue=defaultvalue)$
}

const $member.typecode.cppTypename$& $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$

    return m_$member.name$;
}

$member.typecode.cppTypename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$

    return m_$member.name$;
}
$endif$
>>

member_move(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
>>

// TODO Mirar si el default: esta delante de otros casos, el resto no se ejecuta.
unionmember_discriminator_case(member, totallabels) ::= <<
$if(member.default)$
default:
b = true;
switch(__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
    default:
    break;
}
break;
$else$
$member.labels:{case $it$:}; separator="\n"$
switch(__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
    default:
    break;
}
break;
$endif$
>>

unionmember_copy(member) ::= <<
$if(member.labels)$
$member.labels:{case $it$:}; separator="\n"$
m_$member.name$ = x.m_$member.name$;
break;
$endif$
>>

unionmemberdefault_copy(member) ::= <<
default:
$if(member)$
$if(member.default)$
m_$member.name$ = x.m_$member.name$;
$endif$
$endif$

break;
>>

unionmember_move(member) ::= <<
$if(member.labels)$
$member.labels:{case $it$:}; separator="\n"$
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$

break;
$endif$
>>

unionmemberdefault_move(member) ::= <<
default:
$if(member)$
$if(member.default)$
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
$endif$
$endif$

break;
>>

unionmember_set_discriminator(member, defaultvalue) ::= <<
$if(member.default)$
m__d = $defaultvalue$;
$else$
m__d = $first(member.labels)$;
$endif$
>>

unionmember_check_case_list(member, totallabels) ::= <<
$if(member.default)$
bool b = true;

switch(m__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
    default:
    break;
}
$else$
bool b = false;

switch(m__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
    default:
    break;
}
$endif$

if(!b)
{
    throw BadParamException("This member is not been selected");
}
>>

unionmember_case_selection_se(ctx, member) ::= <<
$if(member.labels)$
$member.labels:{ label |case $label$:}; separator="\n"$
$object_serialization(ctx=ctx, object=member, preffix="m_")$
break;
$endif$
>>

unionmemberdefault_case_selection_se(ctx, member) ::= <<
default:
$if(member)$
$if(member.default)$
$object_serialization(ctx=ctx, object=member, preffix="m_")$
$endif$
$endif$

break;
>>

unionmember_case_selection_de(ctx, member) ::= <<
$if(member.labels)$
$member.labels:{ label |case $label$:}; separator="\n"$
$object_deserialization(ctx=ctx, object=member, preffix="m_")$
break;
$endif$
>>

unionmemberdefault_case_selection_de(ctx, member) ::= <<
default:
$if(member)$
$if(member.default)$
$object_deserialization(ctx=ctx, object=member, preffix="m_")$
$endif$
$endif$

break;
>>

unionmember_case_selection_sesize(ctx, member, data, var) ::= <<
$if(member.labels)$
$member.labels:{ label |case $label$:}; separator="\n"$
$serialized_size(ctx=ctx, object=member, data=data, var=var)$
break;
$endif$
>>

unionmemberdefault_case_selection_sesize(ctx, member, data, var) ::= <<
default:
$if(member)$
$if(member.default)$
$serialized_size(ctx=ctx, object=member, data=data, var=var)$
$endif$
$endif$

break;
>>
