// Copyright 2018 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypeObjectHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "TypeObject.h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _$ctx.headerGuardName$_TYPE_OBJECT_H_
#define _$ctx.headerGuardName$_TYPE_OBJECT_H_

$ctx.directIncludeDependencies : {include | #include "$include$TypeObject.h"}; separator="\n"$

#include <fastrtps/types/TypeObject.h>
#include <map>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined($ctx.filename;format="toUpper"$_SOURCE)
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllexport )
#else
#define $ctx.filename;format="toUpper"$_DllAPI __declspec( dllimport )
#endif // $ctx.filename;format="toUpper"$_SOURCE
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif
#else
#define $ctx.filename;format="toUpper"$_DllAPI
#endif // _WIN32

using namespace eprosima::fastrtps::types;

eProsima_user_DllExport void register$ctx.filename$Types();

$definitions; separator="\n"$

#endif // _$ctx.headerGuardName$_TYPE_OBJECT_H_
>>

typedef_decl(ctx, parent, typedefs) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$typedefs.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$typedefs.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$typedefs.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$typedefs.name$Object();

>>

enum_type(ctx, parent, enum) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$enum.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$enum.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$enum.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$enum.name$Object();

>>

bitmask_type(ctx, parent, bitmask) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$bitmask.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$bitmask.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$bitmask.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$bitmask.name$Object();

>>

struct_type(ctx, parent, struct, extensions) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$struct.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$struct.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$struct.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$struct.name$Object();

>>

union_type(ctx, parent, union, extensions) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$union.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$union.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$union.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$union.name$Object();

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$bitset.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$bitset.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$bitset.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$bitset.name$Object();

>>

annotation(ctx, annotation) ::= <<
eProsima_user_DllExport const TypeIdentifier* Get$annotation.name$Identifier(bool complete = false);
eProsima_user_DllExport const TypeObject* Get$annotation.name$Object(bool complete = false);
eProsima_user_DllExport const TypeObject* GetMinimal$annotation.name$Object();
eProsima_user_DllExport const TypeObject* GetComplete$annotation.name$Object();

namespace $annotation.name$
{
$annotation.enums : {$enum_type(ctx=ctx, parent=annotation, enum=it)$}; separator="\n"$

$annotation.typeDefs : {$typedef_decl(ctx=ctx, parent=annotation, typedefs=it)$}; separator="\n"$
}

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

const_decl(ctx, parent, const) ::= <<>>

/***** Utils *****/